name: Cross platform build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13]
        build_type: [Release]
        c_compiler: [gcc, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: macos-13
            c_compiler: gcc
            cpp_compiler: g++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-13
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install dependencies (Linux & macOS)
      if: runner.os != 'Windows'
      run: |
        if [ "$RUNNER_OS" == "macOS" ]; then
          brew install cmake gcc
        else
          sudo apt update && sudo apt install -y cmake g++
        fi

    - name: Install dependencies (Windows - MSVC)
      if: runner.os == 'Windows' && matrix.c_compiler == 'cl'
      run: |
        choco install cmake -y

    - name: Configure CMake project (Linux & macOS)
      if: runner.os != 'Windows'
      run: |
        cmake -S . -B build

    - name: Configure CMake project (Windows - MSVC)
      if: runner.os == 'Windows' && matrix.c_compiler == 'cl'
      shell: cmd
      run: |
        cmake -S . -B build -G "Visual Studio 17 2022" -A x64

    - name: Build C++ code (Linux & macOS)
      if: runner.os != 'Windows'
      run: |
        cmake --build build

    - name: Build C++ code (Windows - MSVC)
      if: runner.os == 'Windows' && matrix.c_compiler == 'cl'
      shell: cmd
      run: |
        cmake --build build --config Release

    - name: Run tests (Linux & macOS)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        cd ${{ steps.strings.outputs.build-output-dir }}
        if [ -f "./main" ]; then
          echo "Running main:"
          ./main
        else
          echo "Error: main not found in build directory"
          ls -la
          exit 1
        fi

    - name: Run tests (Windows - MSVC)
      if: runner.os == 'Windows' && matrix.c_compiler == 'cl'
      shell: cmd
      run: |
        cd ${{ steps.strings.outputs.build-output-dir }}
        if exist Release\main.exe (
          echo Running main.exe:
          Release\main.exe
        ) else (
          echo Error: main.exe not found in Release directory
          dir
          exit /b 1
        )

    - name: Debug with GDB (Linux)
      if: matrix.os == 'ubuntu-latest'
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      shell: bash
      run: |
        sudo apt-get update && sudo apt-get install -y gdb
        executable="./main"
        if [ -f "$executable" ]; then
          echo "run --num_particles 500000" > gdb_commands.txt
          echo "quit" >> gdb_commands.txt
          echo "Running GDB:"
          gdb --batch --quiet -x gdb_commands.txt "$executable"
        fi
      continue-on-error: true

    - name: Debug with LLDB (macOS)
      if: matrix.os == 'macos-13'
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      shell: bash
      run: |
        executable="./main"
        if [ -f "$executable" ]; then
          echo "run --num_particles 500000" > lldb_commands.txt
          echo "exit" >> lldb_commands.txt
          echo "Running LLDB:"
          lldb --batch -s lldb_commands.txt "$executable"
        fi
      continue-on-error: true

    - name: Debug with CDB (Windows - MSVC)
      if: matrix.os == 'Windows' && matrix.c_compiler == 'cl'
      shell: cmd
      run: |
        cd ${{ steps.strings.outputs.build-output-dir }}
        where cdb >nul 2>&1
        if %ERRORLEVEL% equ 0 (
          ECHO run > cdb_commands.txt
          ECHO q >> cdb_commands.txt
          echo Running CDB:
          cdb -lines -cf cdb_commands.txt Release\main.exe
        ) else (
          echo "CDB not found, installing Windows SDK..."
          choco install windows-sdk-10-version-2004-all -y
          set "PATH=%ProgramFiles(x86)%\Windows Kits\10\Debuggers\x64;%PATH%"
          ECHO run > cdb_commands.txt
          ECHO q >> cdb_commands.txt
          echo Running CDB:
          cdb -lines -cf cdb_commands.txt Release\main.exe
        )
      continue-on-error: true